// <auto-generated/>
// Copyright (c) Lucas Girouard-Stranks (https://github.com/lithiumtoast). All rights reserved.
// Licensed under the MIT license. See LICENSE file in the Git repository root directory (https://github.com/lithiumtoast/native-tools-cs) for full license information.

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;

namespace lithiumtoast.NativeTools
{
    [SuppressMessage("ReSharper", "MemberCanBeInternal", Justification = "Public API.")]
    public static unsafe partial class Native
    {
        private static readonly Dictionary<string, IntPtr> StringsToPointers = new();
        private static readonly Dictionary<IntPtr, string> PointersToStrings = new();

        /// <summary>
        ///     Gets a <see cref="string" /> from a C style string (one dimensional <see cref="byte" /> array terminated by a
        ///     <c>0x0</c>).
        /// </summary>
        /// <param name="stringCPointer">A pointer to the C string.</param>
        /// <returns>A <see cref="string" /> equivalent to the C string pointed by <paramref name="stringCPointer" />.</returns>
        public static string GetStringFrom([In] byte* stringCPointer)
        {
            if (PointersToStrings.TryGetValue((IntPtr)stringCPointer, out var @string))
            {
                return @string;
            }

            @string = Marshal.PtrToStringAnsi((IntPtr)stringCPointer);
            if (string.IsNullOrEmpty(@string))
            {
                return string.Empty;
            }

            PointersToStrings.Add((IntPtr)stringCPointer, @string);
            StringsToPointers.Add(@string, (IntPtr)stringCPointer);

            return @string;
        }

        /// <summary>
        ///     Gets a pointer to a C string (a one dimensional <see cref="byte" /> array terminated by a <c>0x0</c>) from a
        ///     <see cref="string" />.
        /// </summary>
        /// <param name="string">A <see cref="string" />.</param>
        /// <returns>A pointer to a C string (a one dimensional <see cref="byte" /> array terminated by a <c>0x0</c>).</returns>
        public static byte* GetCStringFrom(string @string)
        {
            if (StringsToPointers.TryGetValue(@string, out var pointer))
            {
                return (byte*)pointer;
            }

            pointer = Marshal.StringToHGlobalAnsi(@string);
            PointersToStrings.Add(pointer, @string);
            StringsToPointers.Add(@string, pointer);

            return (byte*)pointer;
        }

        /// <summary>
        ///     Frees any <see cref="string" /> objects allocated by <see cref="GetStringFrom" /> or <see cref="GetCStringFrom" />.
        /// </summary>
        public static void ClearStrings()
        {
            foreach (var pointer in PointersToStrings.Keys)
            {
                Marshal.FreeHGlobal(pointer);
            }

            PointersToStrings.Clear();
            StringsToPointers.Clear();
        }
    }
}
