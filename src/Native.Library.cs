// <auto-generated/>
// Copyright (c) Lucas Girouard-Stranks (https://github.com/lithiumtoast). All rights reserved.
// Licensed under the MIT license. See LICENSE file in the Git repository root directory (https://github.com/lithiumtoast/native-tools-cs) for full license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

#nullable enable

namespace lithiumtoast.NativeTools
{
    public static partial class Native
    {
        private static IEnumerable<string>? _librarySearchDirectories;

        /// <summary>
        ///     Sets a callback for resolving native library imports for a specified <see cref="Assembly" />.
        /// </summary>
        /// <param name="assembly">The <see cref="Assembly" />.</param>
        public static void SetDllImportResolverCallback(Assembly assembly)
        {
            NativeLibrary.SetDllImportResolver(assembly, Resolver);
        }

        private static string GetLibraryFileExtension(NativeRuntimePlatform platform)
        {
            return platform switch
            {
                NativeRuntimePlatform.Windows => ".dll",
                NativeRuntimePlatform.macOS => ".dylib",
                NativeRuntimePlatform.Linux => ".so",
                NativeRuntimePlatform.Android => throw new NotImplementedException(),
                NativeRuntimePlatform.iOS => throw new NotImplementedException(),
                NativeRuntimePlatform.Unknown => throw new NotSupportedException(),
                _ => throw new ArgumentOutOfRangeException(nameof(platform), platform, null)
            };
        }

        private static string GetRuntimeIdentifier(NativeRuntimePlatform platform)
        {
            return platform switch
            {
                NativeRuntimePlatform.Windows => Environment.Is64BitProcess ? "win-x64" : "win-x86",
                NativeRuntimePlatform.macOS => "osx-x64",
                NativeRuntimePlatform.Linux => "linux-x64",
                NativeRuntimePlatform.Android => throw new NotImplementedException(),
                NativeRuntimePlatform.iOS => throw new NotImplementedException(),
                NativeRuntimePlatform.Unknown => throw new NotSupportedException(),
                _ => throw new ArgumentOutOfRangeException(nameof(NativeRuntimePlatform), platform, null)
            };
        }

        private static IEnumerable<string> GetSearchDirectories(NativeRuntimePlatform platform)
        {
            if (_librarySearchDirectories != null)
            {
                return _librarySearchDirectories;
            }

            var runtimeIdentifier = GetRuntimeIdentifier(platform);

            var librarySearchDirectories = new List<string>
            {
                Environment.CurrentDirectory,
                AppDomain.CurrentDomain.BaseDirectory,
                $"libs/{runtimeIdentifier}",
                $"runtimes/{runtimeIdentifier}/native"
            };

            return _librarySearchDirectories = librarySearchDirectories.ToArray();
        }

        private static bool TryGetLibraryPath(NativeRuntimePlatform platform, string libraryName, out string libraryFilePath)
        {
            var libraryPrefix = platform == NativeRuntimePlatform.Windows ? string.Empty : "lib";
            var libraryFileExtension = GetLibraryFileExtension(platform);
            var libraryFileName = $"{libraryPrefix}{libraryName}";

            var directories = GetSearchDirectories(platform);
            foreach (var directory in directories)
            {
                if (TryFindLibraryPath(directory, libraryFileExtension, libraryFileName, out libraryFilePath))
                {
                    return true;
                }
            }

            libraryFilePath = string.Empty;
            return false;
        }

        private static bool TryFindLibraryPath(
            string directoryPath,
            string libraryFileExtension,
            string libraryFileNameWithoutExtension,
            out string result)
        {
            if (!Directory.Exists(directoryPath))
            {
                result = string.Empty;
                return false;
            }

            var searchPattern = $"*{libraryFileExtension}";
            var filePaths = Directory.EnumerateFiles(directoryPath, searchPattern);
            foreach (var filePath in filePaths)
            {
                var fileName = Path.GetFileNameWithoutExtension(filePath);
                if (!fileName.StartsWith(libraryFileNameWithoutExtension, StringComparison.Ordinal))
                {
                    continue;
                }

                result = filePath;
                return true;
            }

            result = string.Empty;
            return false;
        }

        private static IntPtr Resolver(string libraryName, Assembly assembly, DllImportSearchPath? searchPath)
        {
            IntPtr libraryHandle;

            var platform = RuntimePlatform;
            if (TryGetLibraryPath(platform, libraryName, out var libraryFilePath))
            {
                libraryHandle = NativeLibrary.Load(libraryFilePath);
                return libraryHandle;
            }

            if (NativeLibrary.TryLoad(libraryName, assembly, searchPath, out libraryHandle))
            {
                return libraryHandle;
            }

            throw new Exception($"Could not find the native library: {libraryName}. Did you forget to place a native library in the expected file path?");
        }
    }
}
